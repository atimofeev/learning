#!/usr/bin/env python3
"""Prompt CLIPboard helper.
With locally provided files and prompt input
will copy contents to clipboard for web ChatGPT use."""
import os
from argparse import ArgumentParser
from pyperclip import copy

# Constants
MAX_CHARS = 4096
PREVIEW_LINES = 10
CHUNKED_PREAMBLE_MSG = \
    "This is a multi-part question. Please wait for all parts before answering."
CHUNK_START_MSG = \
"This is one part of a multi-part question. Please wait for the rest of the parts before answering."
CHUNKED_PROMPT_END = \
    "This is the end of the multi-part question. You can now proceed with your answer."

# Color formatting for console output
def bold(text): return f"\033[1m{text}\033[0m"
def gbold(text): return f"\033[92m\033[1m{text}\033[0m"
def rbold(text): return f"\033[91m\033[1m{text}\033[0m"

def split_data(data, max_length):
    chunks, chunk = [], ""
    for line in data.split('\n'):
        new_chunk = chunk + line + '\n'
        if len(new_chunk) > max_length:
            chunks.append(chunk.strip())
            chunk = ""
        chunk += line + '\n'
    chunks.append(chunk.strip())
    return chunks

def validate_file_paths(file_paths):
    valid_files = []
    for f in file_paths:
        print(gbold(f) if os.path.exists(f) else rbold(f"{f}: file not found"))
        if os.path.exists(f): valid_files.append(f)
    if not valid_files:
        print(rbold("No existing files found. Exiting."))
        exit()
    print()
    return valid_files

def read_file_contents(file_paths):
    return [(path, open(path, 'r', encoding='utf-8').read()) for path in file_paths]

def prompt_for_user_input():
    print(bold('Enter your prompt (type "q", "quit", or "exit" to exit):'))
    return input(gbold("> "))

def preview_files(prompt, valid_files):
    """Preview selected files"""
    print(f"{gbold('Your prompt:')}\n{prompt}\n")

    file_contents = read_file_contents(valid_files)
    for file_path, content in file_contents:
        file_preview = '\n'.join(content.split('\n')[:PREVIEW_LINES])
        print(f"{gbold(f'{file_path} preview:')}\n{file_preview}\n")

    if input(
        f"{bold('Do you want to proceed?')}"
        f"({gbold('y')}/{rbold('n')}): ").strip().lower() == 'y':
        return True
    return False

def main(args_files):
    try:
        print(bold("Files to copy:") + "\n")
        valid_files = validate_file_paths(args_files)
        if not valid_files:
            print("No valid files provided. Exiting.")
            exit()

        user_prompt = prompt_for_user_input()
        if user_prompt.lower() in ('q', 'quit', 'exit'):
            print(rbold("Exit"))
            exit()

        if not preview_files(user_prompt, valid_files):
            print(rbold("Exit"))
            exit()

        file_contents = read_file_contents(valid_files)
        concatenated_data = user_prompt + \
            "\n" + "\n".join([f"{file_path} file contents:\n{content}" \
            for file_path, content in file_contents])

        if len(concatenated_data) > MAX_CHARS:
            print(rbold("Warning: Data length exceeds the limit."))
            if input(
            f"{bold('Do you want to proceed and split the data?')}"
            f"({gbold('y')}/{rbold('n')}): ").strip().lower() != 'y':
                print(rbold("Exit"))
                exit()

            chunks = split_data(concatenated_data, MAX_CHARS)
            for i, chunk in enumerate(chunks):
                chunk_prefix = CHUNKED_PREAMBLE_MSG if i == 0 else CHUNK_START_MSG
                chunk_suffix = CHUNKED_PROMPT_END if i == len(chunks) - 1 else ""
                chunk_data = f"{chunk_prefix}\n{chunk}\n{chunk_suffix}"

                print(gbold(f"Copying chunk [{i+1}/{len(chunks)}] to clipboard..."))
                copy(chunk_data)
                if i != len(chunks) - 1:
                    input(bold('Press Enter to continue...'))
        else:
            copy(concatenated_data)
            print(gbold("Data copied to clipboard"))
    except (KeyboardInterrupt, EOFError):
        print(rbold("Exit"))
        exit()


if __name__ == '__main__':
    parser = ArgumentParser(description="Process one or more files.")
    parser.add_argument('files', metavar='file', type=str, nargs='+',
        help='One or more file paths to process')
    args = parser.parse_args()
    main(args.files)
